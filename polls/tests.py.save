from django.contrib.auth.models import User
from django.contrib.auth.models import Permission
from django.test import StaticLiveServerTestCase
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium import webdriver as WebDriver
from selenium import webdriver

class MySeleniumTests(LiveServerTestCase):
    # no crearem una BD de test en aquesta ocasió (comentem la línia)
    #fixtures = ['testdb.json',]

    @classmethod
    def setUpClass(cls):
        super().setUpClass()
        opts = Options()
        opts.add_argument("--healess")
        cls.selenium = WebDriver(options=opts)
        cls.selenium.implicitly_wait(5)

        # creem superusuari
        user = User.objects.create_user("isard", "isard@isardvdi.com", "pirineus")
        user.is_staff = True
        user.save()

        # Assignar permisos per veure usuaris
        permission = Permission.objects.get(codename='view_user')
        user.user_permissions.add(permission)

    @classmethod
    def tearDownClass(cls):
        cls.selenium.quit()
        super().tearDownClass()

    def test_user_permissions(self):
        # Iniciar sessió
        self.selenium.get(f"{self.live_server_url}/admin/login/")
        username_input = self.selenium.find_element(By.NAME, "username")
        password_input = self.selenium.find_element(By.NAME, "password")
        username_input.send_keys("isard")
        password_input.send_keys("pirineus")
        password_input.send_keys(Keys.RETURN)

        # Comprovar que l'usuari pot veure la llista d'usuaris
        self.selenium.get(f"{self.live_server_url}/admin/auth/user/")
        self.assertIn("Users", self.selenium.title)

        # Comprovar que l'usuari no pot crear usuaris nous
        self.assertNotIn("Add user", self.selenium.page_source)

        # Comprovar que l'usuari no pot borrar usuaris
        self.assertNotIn("Delete selected", self.selenium.page_source)

